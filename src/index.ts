/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/. */

import {
  fastify,
  FastifyInstance,
  FastifyLoggerInstance,
  FastifyServerOptions,
} from 'fastify';
import {
  ApolloServer,
  Config as ApolloServerConfig,
} from 'apollo-server-fastify';
import { GraphQLSchema } from 'graphql';
import { Logger } from 'pino';
import { SchemaConfig } from 'nexus/dist/core.js';
import logger from './logger/index.js';
import createApolloServer from './apollo/index.js';
import generateSchema, { Context } from './nexus/index.js';

/**
 * Configuration for {@link Marbre:constructor | the class constructor}.
 */
interface Config {
  /**
   * The GraphQL types defined using Nexus.
   *
   * @remarks
   * It's typed as `any` by Nexus for simplicity of developer
   * experience.
   *
   * @see {@link https://nexusjs.org/docs/api/make-schema}
   * @see {@link nexus/dist/builder.d.ts#SchemaConfig.types}
   */
  types: any;
  /**
   * Properties to add to the GraphQL context.
   */
  context?: object;
  /**
   * TypeScript type of the GraphQL context.
   *
   * @example
   * If the context type is defined in `./api/context.ts` and
   * looks like this:
   * ```
   * export interface GraphQLContext {
   *   log: Logger;
   *   prisma: PrismaClient;
   *   services: Services;
   * }
   * ```
   * Use
   * ```
   * contextType: {
   *   module: join(__dirname, 'api/context.ts'),
   *   name: 'GraphQLContext',
   * },
   * ```
   */
  contextType: Context;
  /**
   * Path to a module that contains the exported source types of
   * the API.
   *
   * @example
   * If the source types are defined in `./api/sourceTypes.ts`:
   * ```
   * sourceTypesPath: join(__dirname, 'api/sourceTypes.ts'),
   * ```
   * @see {@link https://nexusjs.org/docs/guides/source-types}
   * @see {@link nexus/dist/builder.d.ts#BuilderConfigInput.sourceTypes}
   */
  sourceTypes: string;
  /**
   * A path to a directory where the generated types and GraphQL
   * schema will be located.
   *
   * @example
   * ```
   * outputDir: join(__dirname, 'api/generated/'),
   * ```
   *
   * @see {@link nexus/dist/builder.d.ts#BuilderConfigInput.outputs}
   */
  outputDir: string;
  /**
   * Host on which the server will listen.
   * @defaultValue `localhost`
   */
  host?: string;
  /**
   * Port on which the server will listen.
   */
  port: number;
  /**
   * Apollo Server configuration.
   * This option can be used to override the internal configuration.
   *
   * @see{@link https://www.apollographql.com/docs/apollo-server/api/apollo-server/#options}
   */
  apollo?: Partial<ApolloServerConfig>;
  /**
   * Nexus configuration.
   * This option can be used to override the internal configuration.
   *
   * @see {@link https://nexusjs.org/docs/api/make-schema}
   */
  nexus?: Partial<SchemaConfig>;
  /**
   * Options used to create Fastify instance.
   * These options will be passed down directly to `fastify()`
   * function.
   *
   * @see {@link https://www.fastify.io/docs/latest/Reference/Server/#factory}
   */
  fastify?: FastifyServerOptions;
}

/**
 * A GraphQL sever based on Fastify, Apollo Server and Nexus,
 * embracing a pure Code-First approach and enforces type-safety.
 * @see {@link https://www.fastify.io/}
 * @see {@link https://www.apollographql.com/docs/apollo-server/}
 * @see {@link https://nexusjs.org/}
 * @public
 */
export default class Marbre {
  /**
   * Host on which the server will listen.
   */
  private readonly host?: string;

  /**
   * Port on which the server will listen.
   */
  private readonly port: number;

  /**
   * Apollo Server instance, used as middleware in the Fastify app.
   */
  readonly apollo: ApolloServer;

  /**
   * Fastify application instance.
   */
  readonly fastify: FastifyInstance;

  /**
   * Logger instance.
   */
  private readonly logger: Logger;

  /**
   * GraphQL schema generated by Nexus.
   */
  readonly schema: GraphQLSchema;

  constructor({
    fastify: fastifyOptions,
    host,
    port,
    types,
    context,
    contextType,
    sourceTypes,
    outputDir,
    apollo,
    nexus,
  }: Config) {
    this.host = host;
    this.port = port;

    this.fastify = fastify({
      logger: logger as FastifyLoggerInstance,
      ...fastifyOptions,
    });

    this.logger = logger;

    this.schema = generateSchema({
      types,
      contextType,
      sourceTypes,
      outputDir,
      config: nexus,
    });

    this.apollo = createApolloServer({
      schema: this.schema,
      context,
      logger: this.logger,
      config: apollo,
      fastify: this.fastify,
    });
  }

  /**
   * Starts the server.
   *
   * @remarks
   *
   * This method will start Apollo server (GraphQL layer) then
   * it will launch Fastify application which wraps Apollo.
   * The GraphQL API is exposed on `/graphql`.
   */
  async start() {
    await this.apollo.start();
    this.fastify.register(this.apollo.createHandler());
    await this.fastify
      .listen({ port: this.port, host: this.host })
      .then((address) => {
        if (!process.argv.includes('--nexus-generate')) {
          this.logger.info(
            `∎ Marbre ready at ${address}${this.apollo.graphqlPath} ∎`
          );
        }
      })
      .catch((err) => {
        this.logger.error(err);
        process.exit(1);
      });
  }
}

export { generateSchema };
